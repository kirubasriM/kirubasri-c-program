 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
//Check for Left branch-----|
bool isSameLeftTree(struct TreeNode* p, struct TreeNode* q) {
    if(p == NULL && q == NULL)
        return true;
    else if(p == NULL && q != NULL)
        return false;
    else if (p != NULL && q == NULL)
        return false;

    if(p->val != q->val)
        return false;
    return isSameLeftTree(p->left, q->left);
}


//Check for Right branch-----|
bool isSameRightTree(struct TreeNode* p, struct TreeNode* q) {
    if(p == NULL && q == NULL)
        return true;
    else if(p == NULL && q != NULL)
        return false;
    else if (p != NULL && q == NULL)
        return false;

    if(p->val != q->val)
        return false;

    return isSameRightTree(p->right, q->right);
}

//Check tree's
bool isSameTree(struct TreeNode* p, struct TreeNode* q) {
    //Check head first
    if(p == NULL && q == NULL)
        return true;
    else if(p == NULL && q != NULL)
        return false;
    else if (p != NULL && q == NULL)
        return false;
    else if(p->val != q->val)
        return false;

    //Check for 1st sub branches
    bool left = isSameLeftTree(p->left, q->left);
    bool right = isSameRightTree(p->right, q->right);

    //Check for 2nd sub branches
    bool all_left = isSameTree(p->left, q->left);
    bool all_right = isSameTree(p->right, q->right);
    
    
    return (left && right && all_left && all_right) ;
}
